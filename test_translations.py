#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Vesta
"""
import requests
import sys
import re

def test_translations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö"""
    base_url = "http://localhost:5000"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å—Å—è
    test_phrases = {
        # –†—É—Å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã -> –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
        "–í—Å–µ —Ç–∏–ø—ã": "All Types",
        "–î–æ—Ö–æ–¥—ã": "Income", 
        "–†–∞—Å—Ö–æ–¥—ã": "Expenses",
        "–ü–µ—Ä–µ–≤–æ–¥—ã": "Transfers",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": "User",
        "–í—Å–µ": "All",
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "Category",
        "–î–∞—Ç–∞ —Å": "Date From",
        "–î–∞—Ç–∞ –ø–æ": "Date To",
        "–î–∞—Ç–∞": "Date",
        "–¢–∏–ø": "Type",
        "–°—á–µ—Ç–∞": "Accounts",
        "–°—É–º–º–∞": "Amount",
        "–û–ø–∏—Å–∞–Ω–∏–µ": "Description",
        "–ö–æ–Ω—Ç–∞–∫—Ç": "Contact"
    }
    
    pages_to_test = [
        "/transactions",
        "/accounts", 
        "/profile"
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    
    for page in pages_to_test:
        print(f"\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page}")
        
        # –¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        print("  üá∑üá∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫...")
        try:
            response = requests.get(f"{base_url}{page}?lang=ru", timeout=10)
            if response.status_code == 200:
                content = response.text
                found_phrases = []
                missing_phrases = []
                
                for ru_phrase, en_phrase in test_phrases.items():
                    if ru_phrase in content:
                        found_phrases.append(ru_phrase)
                    else:
                        missing_phrases.append(ru_phrase)
                
                print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö —Ñ—Ä–∞–∑: {len(found_phrases)}")
                if found_phrases:
                    print(f"    üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ: {', '.join(found_phrases[:5])}{'...' if len(found_phrases) > 5 else ''}")
                
                if missing_phrases:
                    print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(missing_phrases)} —Ñ—Ä–∞–∑")
                    print(f"    üìù –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: {', '.join(missing_phrases[:5])}{'...' if len(missing_phrases) > 5 else ''}")
            else:
                print(f"    ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (HTTP {response.status_code})")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ: {e}")
            
        # –¢–µ—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        print("  üá¨üáß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫...")
        try:
            response = requests.get(f"{base_url}{page}?lang=en", timeout=10)
            if response.status_code == 200:
                content = response.text
                found_phrases = []
                missing_phrases = []
                
                for ru_phrase, en_phrase in test_phrases.items():
                    if en_phrase in content:
                        found_phrases.append(en_phrase)
                    else:
                        missing_phrases.append(en_phrase)
                
                print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ñ—Ä–∞–∑: {len(found_phrases)}")
                if found_phrases:
                    print(f"    üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ: {', '.join(found_phrases[:5])}{'...' if len(found_phrases) > 5 else ''}")
                
                if missing_phrases:
                    print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(missing_phrases)} —Ñ—Ä–∞–∑")
                    print(f"    üìù –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: {', '.join(missing_phrases[:5])}{'...' if len(missing_phrases) > 5 else ''}")
            else:
                print(f"    ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (HTTP {response.status_code})")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {e}")

def check_translation_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é"""
    print("\nüîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
        base_url = "http://localhost:5000"
        
        print("  üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...")
        response = requests.get(f"{base_url}/set_language/ru", allow_redirects=False, timeout=10)
        print(f"    –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        print("  üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...")
        response = requests.get(f"{base_url}/set_language/en", allow_redirects=False, timeout=10)  
        print(f"    –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–∞–∑–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
        print("  üè† –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º lang...")
        
        # –†—É—Å—Å–∫–∏–π
        response = requests.get(f"{base_url}/?lang=ru", timeout=10)
        ru_content = response.text
        print(f"    RU - –°—Ç–∞—Ç—É—Å: {response.status_code}, –†–∞–∑–º–µ—Ä: {len(ru_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π  
        response = requests.get(f"{base_url}/?lang=en", timeout=10)
        en_content = response.text
        print(f"    EN - –°—Ç–∞—Ç—É—Å: {response.status_code}, –†–∞–∑–º–µ—Ä: {len(en_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if ru_content == en_content:
            print("    ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–Ω—Ç–µ–Ω—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –æ–±–æ–∏—Ö —è–∑—ã–∫–æ–≤!")
        else:
            print("    ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏")
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

def analyze_template_issues():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ —à–∞–±–ª–æ–Ω–∞—Ö"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    
    try:
        base_url = "http://localhost:5000"
        response = requests.get(f"{base_url}/transactions?lang=ru", timeout=10)
        
        if response.status_code == 200:
            content = response.text
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ HTML
            hardcoded_russian = []
            lines = content.split('\n')
            
            for i, line in enumerate(lines):
                if re.search(r'>[–ê-–Ø–∞-—è]', line) and '{{' not in line:
                    text_match = re.search(r'>([–ê-–Ø–∞-—è][^<]*)', line)
                    if text_match:
                        hardcoded_russian.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {text_match.group(1).strip()}")
            
            print(f"  üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–ø–µ—Ä–µ–≤–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(hardcoded_russian)}")
            if hardcoded_russian:
                for item in hardcoded_russian[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"    ‚Ä¢ {item}")
                    
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {response.status_code}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

if __name__ == "__main__":
    print("üåç –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ Vesta")
    print("=" * 50)
    
    test_translations()
    check_translation_system() 
    analyze_template_issues()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")