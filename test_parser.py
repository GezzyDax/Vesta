#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ Alpha Bank
"""

import os
import sys
import pandas as pd
from app import create_app
from app.bank_import import AlphaBankParser

def test_alpha_bank_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä Alpha Bank"""
    file_path = 'test_file.xlsx'
    
    if not os.path.exists(file_path):
        print("‚ùå –§–∞–π–ª test_file.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {file_path}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
        print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞...")
        
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤
        xl_file = pd.ExcelFile(file_path)
        print(f"–õ–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ: {xl_file.sheet_names}")
        
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        df = pd.read_excel(file_path, sheet_name=0, header=None)
        print(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 25 —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print("\nüìã –ü–µ—Ä–≤—ã–µ 25 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:")
        for i in range(min(25, len(df))):
            row_data = []
            for j in range(min(15, len(df.columns))):  # –ü–µ—Ä–≤—ã–µ 15 —Å—Ç–æ–ª–±—Ü–æ–≤
                cell_value = df.iloc[i, j]
                if pd.isna(cell_value):
                    row_data.append("NULL")
                else:
                    row_data.append(str(cell_value)[:50])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            print(f"–°—Ç—Ä–æ–∫–∞ {i}: {' | '.join(row_data)}")
        
        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä Alpha Bank...")
        parser = AlphaBankParser()
        
        transactions = parser.parse_file(file_path)
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–µ—Ä –Ω–∞—à—ë–ª {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        if transactions:
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
            for i, trans in enumerate(transactions[:5]):  # –ü–µ—Ä–≤—ã–µ 5
                print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {i+1}:")
                print(f"  –î–∞—Ç–∞: {trans['date']}")
                print(f"  –°—É–º–º–∞: {trans['amount']}")
                print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {trans['description'][:100]}...")
                print(f"  –¢–∏–ø: {trans['transaction_type']}")
                print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {trans['category']}")
                if trans.get('subcategory'):
                    print(f"  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {trans['subcategory']}")
                if trans.get('contact_phone'):
                    print(f"  –¢–µ–ª–µ—Ñ–æ–Ω: {trans['contact_phone']}")
                print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = create_app()
    
    with app.app_context():
        test_alpha_bank_parser()

if __name__ == '__main__':
    main()